# trigger:
#   branches:
#     include:
      # - main (se ejecutaría la pipeline haciendo pushes a main)
      # - ci-cd (No es necesario porque se configuró una build validation sobre main)

pool:
  name: "Default"

resources:
  containers:
    - container: runner
      image: schoolof.azurecr.io/runner:latest
      endpoint: sc-acr-schoolof
      options: --user 0:0

variables:
  serviceConnectionRm: sc-school-of-2025-mvd
  serviceConnection: sc-acr-schoolof
  resourceGroup: SchoolOf       
  containerAppName: school-of-app-env  
  acrName: schoolof.azurecr.io   
  imageName: mg-fg-movie-shop-debugged-api-ci
  imageTag: v1.0.0-ci

stages:
# --------------------
# 1️⃣ Checkout
# --------------------
- stage: Checkout
  displayName: 'Checkout code'
  jobs:
    - job: CheckoutJob
      steps:
        - checkout: self

# --------------------
# 2️⃣ Build Docker Image
# --------------------
- stage: Build
  displayName: 'Build Docker Image'
  dependsOn: Checkout
  jobs:
    - job: BuildJob
      container: runner
      steps:
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: build
            containerRegistry: $(serviceConnection)
            repository: $(acrName)/$(imageName)
            Dockerfile: Dockerfile.ci
            tags: $(imageTag)

# --------------------
# 3️⃣ Test with Pytest
# --------------------
- stage: Test
  displayName: 'Run Tests'
  dependsOn: Build 
  jobs:
    - job: TestJob
      container: runner
      steps:
        - task: Docker@2
          displayName: 'Build Docker Image for Test'
          inputs:
            command: build
            dockerfile: Dockerfile.ci
            repository: $(imageName)
            tags: $(imageTag)
        - script: |
            docker run --rm $(imageName):$(imageTag) pytest
          displayName: 'Run Pytest in Docker Container'
        # - task: PublishTestResults@2  Muestra un informe de 50 mil líneas imposible de asimilar.
        #   inputs:
        #     testResultsFormat: 'JUnit'
        #     testResultsFiles: '**/reports/test-results.xml'
        #     failTaskOnFailedTests: true

# # --------------------
# # 4️⃣ Release / Push to ACR
# # --------------------
- stage: Release
  displayName: 'Push Image to ACR'
  dependsOn: Test
  jobs:
    - job: PushJob
      container: runner
      steps:
        - task: Docker@2
          displayName: 'Push Docker Image'
          inputs:
            command: push
            containerRegistry: $(serviceConnection)
            repository: $(acrName)/$(imageName)
            tags: $(imageTag)

# --------------------
# 5️⃣ Deploy to Container App
# --------------------
- stage: Deploy
  displayName: 'Deploy to Container App'
  dependsOn: Release  
  condition: succeeded()
  jobs:
    - job: DeployJob
      container: runner
      steps:
        - task: AzureCLI@2
          displayName: 'Deploy Container App'
          inputs:
            azureSubscription: $(serviceConnectionRm)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az containerapp update \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --image $(acrName)/$(imageName):$(imageTag) \
                --environment $(containerAppName)
