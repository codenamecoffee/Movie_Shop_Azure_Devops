# trigger:
#   branches:
#     include:
      # - main (se ejecutaría la pipeline haciendo pushes a main)
      # - ci-cd (No es necesario porque se configuró una build validation sobre main)

pool:
  name: "Default"

resources:
  containers:
    - container: runner
      image: schoolof.azurecr.io/runner:latest
      endpoint: sc-acr-schoolof
      options: --user 0:0

variables:
  serviceConnectionRm: sc-school-of-2025-mvd
  serviceConnection: sc-acr-schoolof
  resourceGroup: SchoolOf       
  containerAppName: school-of-app-env  
  acrName: schoolof.azurecr.io   
  imageName: mg-fg-movie-shop-debugged-api-ci
  imageTag: v1.0.0-ci

stages:
# --------------------
# 1️⃣ Checkout
# --------------------
- stage: Checkout
  displayName: 'Checkout code'
  jobs:
    - job: CheckoutJob
      steps:
        - checkout: self

# --------------------
# 2️⃣ Build Docker Image
# --------------------
- stage: Build
  displayName: 'Build Docker Image'
  dependsOn: Checkout
  jobs:
    - job: BuildJob
      container: runner
      steps:
        - task: Docker@2
          displayName: 'Build Docker Image'
          inputs:
            command: build
            containerRegistry: $(serviceConnection)
            repository: $(imageName)
            Dockerfile: Dockerfile.ci
            tags: $(imageTag)

        # Guardar la imagen como tar.gz (Mejorar eficiencia)
        - script: |
            docker save $(imageName):$(imageTag) | gzip > image.tar.gz
          displayName: 'Save Docker Image as tar.gz'

        # Publicar el tar.gz como artefacto (Mejorar eficiencia)
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: 'image.tar.gz'
            ArtifactName: 'docker-image'
            publishLocation: 'Container'

# --------------------
# 3️⃣ Test with Pytest
# --------------------
- stage: Test
  displayName: 'Run Tests'
  dependsOn: Build 
  jobs:
    - job: TestJob
      container: runner
      steps:
        # Descargar artefacto publicado en Build (Más eficiencia)
        - task: DownloadBuildArtifacts@0
          inputs:
            buildType: 'current'
            downloadType: 'single'
            artifactName: 'docker-image'
            downloadPath: '$(Pipeline.Workspace)'

        # Cargar la imagen desde el tar.gz
        - script: |
            docker load -i $(Pipeline.Workspace)/docker-image/image.tar.gz
          displayName: 'Load Docker Image from tar.gz'

        # Levantar API y correr tests
        - script: |
            docker run -d --rm -p 8000:8000 --name api_test $(imageName):$(imageTag)
            for i in {1..30}; do
              if curl -s http://localhost:8000/health > /dev/null; then
                echo "API is up!"
                break
              fi
              echo "Waiting for API..."
              sleep 2
            done
            docker exec api_test pytest testing/src -qq --tb=short --disable-warnings --maxfail=1
            RESULT=$?
            docker stop api_test
            exit $RESULT
          displayName: 'Run API + Tests in Container'

# # --------------------
# # 4️⃣ Release / Push to ACR
# # --------------------
- stage: Release
  displayName: 'Push Image to ACR'
  dependsOn: Test
  condition: succeeded()
  jobs:
    - job: PushJob
      container: runner
      steps:

        # Continúa utilizando el artefacto que se descargó en Test
        - download: current
          artifact: drop

        - script: |
            docker load -i $(Pipeline.Workspace)/docker-image/image.tar.gz
            docker tag $(imageName):$(imageTag) $(acrName)/$(imageName):$(imageTag)
            docker push $(acrName)/$(imageName):$(imageTag)
          displayName: 'Load, Retag & Push Docker Image to ACR'


# --------------------
# 5️⃣ Deploy to Container App
# --------------------
- stage: Deploy
  displayName: 'Deploy to Container App'
  dependsOn: Release  
  condition: succeeded()
  jobs:
    - job: DeployJob
      container: runner
      steps:
        - task: AzureCLI@2
          displayName: 'Deploy Container App'
          inputs:
            azureSubscription: $(serviceConnectionRm)
            scriptType: bash
            scriptLocation: inlineScript
            inlineScript: |
              az containerapp update \
                --name $(containerAppName) \
                --resource-group $(resourceGroup) \
                --image $(acrName)/$(imageName):$(imageTag) \
                --environment $(containerAppName)
