FROM python:3.12-slim

# Usuario no-root para seguridad
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Establecer directorio de trabajo:
WORKDIR /app 

# Instalar dependencias del sistema
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc build-essential curl ca-certificates \
    && curl -LsSf https://astral.sh/uv/install.sh | sh \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Copiamos los archivos
COPY movie_shop_backend/pyproject.toml .
COPY movie_shop_backend/uv.lock .

# Agregamos los nuevos directorios a la variable de entorno path: (prevenir errores)
ENV PATH="/root/.cargo/bin:/root/.local/bin:${PATH}"

# Usar uv para installar dependencias:
RUN uv sync --frozen

# Copiamos los datos del proyecto:
COPY movie_shop_backend/src ./src
# COPY movie_shop_backend/app_state.json . No existe por el .gitignore de movie_shop_backend.
COPY testing ./testing

# Instalamos las dependencias de testing:
RUN uv pip install -r testing/requirements.txt

# Crear directorio para datos persistentes:
RUN mkdir -p data

# Mover archivos de estado al directorio de datos:
RUN mv app_state.json data/

# Configurar variables de entorno en el contenedor:
ENV STATE_FILE=/app/data/app_state.json
ENV PYTHONUNBUFFERED=1

# Cambiar a usuario no-root (Creado arriba del todo)
RUN chown -R appuser:appuser /app
USER appuser

# Agregar el venv al PATH para que pytest esté disponible
ENV PATH="/app/.venv/bin:${PATH}"

# Configurar cache de uv en directorio accesible para appuser
ENV UV_CACHE_DIR=/app/.uv-cache

# Configurar el puerto y comando
EXPOSE 8000

# Solución: UV instala 'uvicorn' en un entorno temporal:
CMD ["uv", "run", "--with", "uvicorn", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]

