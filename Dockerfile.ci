FROM python:3.12-slim

# Crea el usuario y grupo no-root para seguridad
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Instala dependencias del sistema como root
RUN apt-get update && apt-get install -y --no-install-recommends \
    gcc build-essential curl ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Establece el directorio de trabajo como root
WORKDIR /app 

# Cambia la propiedad del directorio de trabajo a 'appuser'
RUN chown -R appuser:appuser /app

# Ahora, cambia al usuario no-root
USER appuser

# Copia los archivos del proyecto como 'appuser'
COPY movie_shop_backend/pyproject.toml .
COPY movie_shop_backend/uv.lock .
COPY movie_shop_backend/src ./src
COPY ./movie_shop_backend/app_state.json ./data/app_state.json
COPY testing ./testing

# Crear directorio para datos persistentes (como 'appuser')
RUN mkdir -p data

# Instala 'uv' como 'appuser' para que sea accesible para él
RUN curl -LsSf https://astral.sh/uv/install.sh | sh

# Agrega la ubicación del binario de 'uv' al PATH de 'appuser'
ENV PATH="/home/appuser/.cargo/bin:/home/appuser/.local/bin:${PATH}"

# Usa uv para instalar las dependencias de producción
RUN uv sync --frozen

# Instala las dependencias de testing (como 'appuser')
RUN pip install -r testing/requirements.txt

# Copia archivos de estado y configura variables de entorno
COPY movie_shop_backend/app_state.json data/
ENV STATE_FILE=/app/data/app_state.json
ENV PYTHONUNBUFFERED=1
ENV UV_CACHE_DIR=/app/.uv-cache

# Configura el puerto y el comando de inicio
EXPOSE 8000
CMD ["uv", "run", "--with", "uvicorn", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8000"]